name: Upload scan to php-sectools

on:
  push:
    paths:
      - "example-scan.json"
      - "scans/**/*.json"
  workflow_dispatch:
    inputs:
      json_path:
        description: "Caminho do arquivo JSON (ex.: example-scan.json)"
        required: false
        default: "example-scan.json"

jobs:
  upload:
    runs-on: ubuntu-latest
    outputs:
      graph_id: ${{ steps.extract_graph_id.outputs.graph_id || '' }}
    env:
      API_BASE: ${{ secrets.PHP_SECTOOLS_API_BASE }}
      API_TOKEN: ${{ secrets.PHP_SECTOOLS_API_TOKEN }}
      JSON_PATH: ${{ github.event.inputs.json_path || 'example-scan.json' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine JSON file
        id: pick
        run: |
          set -euo pipefail
          FILE="${JSON_PATH}"
          if [ ! -f "$FILE" ]; then
            echo "Arquivo $FILE não encontrado no workspace. Tentando example-scan.json..."
            if [ -f "example-scan.json" ]; then
              FILE="example-scan.json"
            else
              echo "::error::Arquivo JSON não encontrado: $JSON_PATH"
              exit 1
            fi
          fi
          echo "Selected file: $FILE"
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Show head of JSON (debug)
        run: |
          echo "=== Head of selected file ==="
          head -n 50 "${{ steps.pick.outputs.file }}" || true

      - name: Upload to API
        id: upload
        run: |
          set -euo pipefail
          URL="${API_BASE%/}/api/upload-scan"
          echo "Posting ${GITHUB_WORKSPACE}/${{ steps.pick.outputs.file }} -> $URL"
          curl -sS -X POST "$URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${API_TOKEN}" \
            --data-binary @"${{ steps.pick.outputs.file }}" \
            -o response.json -w "\nHTTP_STATUS:%{http_code}\n"
          echo "Saved response.json (size=$(wc -c < response.json) bytes)"
          cat response.json

      - name: Extract graph_id
        id: extract_graph_id
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          if [ -f response.json ]; then
            GRAPH_ID=$(jq -r '.graph_id // empty' response.json || true)
            if [ -n "$GRAPH_ID" ]; then
              echo "Found graph_id=$GRAPH_ID"
              echo "::set-output name=graph_id::$GRAPH_ID"
            else
              echo "No graph_id present in response.json"
            fi
          else
            echo "response.json not found"
          fi

      - name: List graphs
        run: |
          curl -sS "${API_BASE%/}/api/graphs" | jq '.' || true
